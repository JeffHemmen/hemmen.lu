%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2568 727
%%HiResBoundingBox: 0 0 2568 726.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2568 726.95996 re
W
q
[0.24 0 0 -0.24 0 726.95996] cm
q
0 0 10700 3028.125 re
W*
q
[24.356718 0 0 24.364086 503.7706 297.42078] cm
/DeviceRGB {} CS
[1 0.8902 0.6902] SC
/DeviceRGB {} cs
[1 0.8902 0.6902] sc
48.82959 41.380371 m
48.82959 58.619141 l
66.068848 58.619141 l
66.068848 41.380371 l
48.82959 41.380371 l
h
64.068848 56.619141 m
50.82959 56.619141 l
50.82959 43.380371 l
64.068848 43.380371 l
64.068848 56.619141 l
h
f
77.213997 40.764999 m
84.060997 40.764999 l
84.060997 38.764999 l
77.213997 38.764999 l
77.213997 30.235001 l
73.688004 30.235001 l
73.688004 24.298 l
71.688004 24.298 l
71.688004 30.235001 l
66.069 30.235001 l
66.069 18.612 l
64.069 18.612 l
64.069 30.235001 l
58.449001 30.235001 l
58.449001 14.973 l
56.449001 14.973 l
56.449001 30.235001 l
50.830002 30.235001 l
50.830002 19.09 l
36.807999 19.09 l
36.807999 21.09 l
48.830002 21.09 l
48.830002 30.235001 l
43.290001 30.235001 l
43.290001 32.235001 l
75.213997 32.235001 l
75.213997 64.158997 l
77.213997 64.158997 l
77.213997 61.633999 l
84.060997 61.633999 l
84.060997 59.633999 l
77.213997 59.633999 l
77.213997 54.810001 l
85.539001 54.810001 l
85.539001 52.810001 l
77.213997 52.810001 l
77.213997 47.873001 l
87.642998 47.873001 l
87.642998 45.873001 l
77.213997 45.873001 l
77.213997 40.764999 l
h
f
28.449221 19.09033 4.776369 2 re
f
81.672363 78.910156 4.776863 2 re
f
6.5 31.713869 3.8667 1.999998 re
f
27.896999 59.633999 m
23.461 66.684998 l
14.688 66.684998 l
14.688 68.684998 l
24.566 68.684998 l
29.000999 61.633999 l
37.683998 61.633999 l
37.683998 69.764999 l
41.209999 69.764999 l
41.209999 75.702003 l
43.209999 75.702003 l
43.209999 69.764999 l
48.830002 69.764999 l
48.830002 81.389 l
50.830002 81.389 l
50.830002 69.764999 l
56.449001 69.764999 l
56.449001 85.027 l
58.449001 85.027 l
58.449001 69.764999 l
64.069 69.764999 l
64.069 80.910004 l
78.089996 80.910004 l
78.089996 78.910004 l
66.069 78.910004 l
66.069 69.764999 l
71.608002 69.764999 l
71.608002 67.764999 l
39.683998 67.764999 l
39.683998 35.841 l
37.683998 35.841 l
37.683998 38.764999 l
29.000999 38.764999 l
24.566 31.714001 l
14.688 31.714001 l
14.688 33.714001 l
23.461 33.714001 l
27.896999 40.764999 l
37.683998 40.764999 l
37.683998 45.873001 l
8.433 45.873001 l
8.433 47.873001 l
37.683998 47.873001 l
37.683998 52.810001 l
18.214001 52.810001 l
18.214001 54.810001 l
37.683998 54.810001 l
37.683998 59.633999 l
27.896999 59.633999 l
h
f
6.5 66.68457 3.8667 2 re
f
90.429199 45.872559 3.070801 2 re
f
Q
q
[34.017296 0 0 34.027584 4099.8511 1100.33801] cm
q
7.7 5.84 m
7.7 15.980001 l
7.7 17.513334 7.373333 18.626667 6.72 19.32 c
6.066667 20.013332 5.1 20.359999 3.82 20.360001 c
2.846666 20.360001 2.043333 20.106667 1.41 19.6 c
0.776666 19.093334 0.353333 18.380001 0.14 17.460001 c
1.46 17.220001 l
1.78 18.513334 2.566666 19.160002 3.82 19.160002 c
4.7 19.160002 5.346666 18.893335 5.76 18.360003 c
6.173333 17.82667 6.38 17.120003 6.38 16.240002 c
6.38 5.840002 l
7.7 5.840002 l
7.7 5.84 l
h
18.48 14.6 m
18.48 13.76 18.166666 13.05 17.539999 12.47 c
16.913332 11.89 16.153332 11.6 15.259999 11.6 c
14.393333 11.6 13.646666 11.89 13.02 12.47 c
12.393333 13.05 12.026667 13.76 11.919999 14.6 c
18.48 14.6 l
h
15.34 10.520001 m
16.620001 10.520001 17.66 10.933333 18.459999 11.76 c
19.259998 12.586667 19.666664 13.653334 19.679998 14.96 c
19.679998 15.68 l
11.919998 15.68 l
11.973332 16.719999 12.316665 17.556667 12.949998 18.190001 c
13.583331 18.823334 14.406665 19.146667 15.419998 19.16 c
16.046665 19.16 16.643331 19.01 17.209999 18.709999 c
17.776667 18.409998 18.213333 18.013332 18.519999 17.519999 c
19.399998 18.259998 l
18.533331 19.579998 17.199999 20.239998 15.399998 20.239998 c
13.986665 20.226664 12.856665 19.766665 12.009997 18.859999 c
11.16333 17.953333 10.733331 16.786667 10.719997 15.359999 c
10.719997 13.973332 11.156664 12.823332 12.029997 11.909999 c
12.90333 10.996666 14.006663 10.533332 15.339996 10.519999 c
15.34 10.520001 l
h
25.799999 4.64 m
26.359999 4.64 26.82 4.72 27.179998 4.88 c
26.939999 5.92 l
26.673332 5.786667 26.313332 5.72 25.859999 5.72 c
24.779999 5.72 24.239998 6.513333 24.239998 8.1 c
24.239998 10.76 l
26.399998 10.76 l
26.399998 11.84 l
24.239998 11.84 l
24.239998 20 l
23.039997 20 l
23.039997 11.84 l
21.119997 11.84 l
21.119997 10.76 l
23.039997 10.76 l
23.039997 7.66 l
23.039997 6.753334 23.293331 6.026667 23.799997 5.480001 c
24.306664 4.933334 24.973331 4.653334 25.799997 4.64 c
25.799999 4.64 l
h
31.719999 4.64 m
32.279999 4.64 32.739998 4.72 33.099998 4.88 c
32.859997 5.92 l
32.59333 5.786667 32.23333 5.72 31.779997 5.72 c
30.699997 5.72 30.159996 6.513333 30.159996 8.1 c
30.159996 10.76 l
32.319996 10.76 l
32.319996 11.84 l
30.159996 11.84 l
30.159996 20 l
28.959995 20 l
28.959995 11.84 l
27.039995 11.84 l
27.039995 10.76 l
28.959995 10.76 l
28.959995 7.66 l
28.959995 6.753334 29.213329 6.026667 29.719995 5.480001 c
30.226662 4.933334 30.89333 4.653334 31.719995 4.64 c
31.719999 4.64 l
h
41.060001 5.84 m
41.060001 12.08 l
48.980003 12.08 l
48.980003 5.84 l
50.300003 5.84 l
50.300003 20 l
48.980003 20 l
48.980003 13.280001 l
41.060005 13.280001 l
41.060005 20 l
39.740005 20 l
39.740005 5.84 l
41.060005 5.84 l
41.060001 5.84 l
h
61.080002 14.6 m
61.080002 13.76 60.76667 13.05 60.140003 12.47 c
59.513336 11.89 58.753338 11.6 57.860004 11.6 c
56.99334 11.6 56.24667 11.89 55.620003 12.47 c
54.993336 13.05 54.626667 13.76 54.520004 14.6 c
61.080006 14.6 l
61.080002 14.6 l
h
57.939999 10.520001 m
59.220001 10.520001 60.259998 10.933333 61.059998 11.76 c
61.859997 12.586667 62.266663 13.653334 62.279999 14.96 c
62.279999 15.68 l
54.519997 15.68 l
54.57333 16.719999 54.916664 17.556667 55.549995 18.190001 c
56.183327 18.823334 57.00666 19.146667 58.019997 19.16 c
58.646664 19.16 59.243328 19.01 59.809998 18.709999 c
60.376667 18.409998 60.813332 18.013332 61.119999 17.519999 c
62 18.259998 l
61.133335 19.579998 59.799999 20.239998 58 20.239998 c
56.586666 20.226664 55.456669 19.766665 54.610001 18.859999 c
53.763332 17.953333 53.333332 16.786667 53.32 15.359999 c
53.32 13.973332 53.756668 12.823332 54.630001 11.909999 c
55.503334 10.996666 56.60667 10.533332 57.940002 10.519999 c
57.939999 10.520001 l
h
69.360001 10.520001 m
70.040001 10.520001 70.623329 10.693334 71.110001 11.040001 c
71.596672 11.386668 71.940002 11.880001 72.139999 12.520001 c
72.40667 11.88 72.826668 11.386667 73.400002 11.040001 c
73.973335 10.693335 74.606667 10.520001 75.300003 10.520001 c
77.633339 10.520001 78.800003 11.826667 78.800003 14.440001 c
78.800003 20 l
77.600006 20 l
77.600006 14.5 l
77.600006 12.58 76.826675 11.613334 75.280006 11.6 c
74.346672 11.6 73.646675 11.906667 73.180008 12.520001 c
72.713341 13.133334 72.480011 13.926667 72.480011 14.900001 c
72.480011 20 l
71.280014 20 l
71.280014 14.38 l
71.280014 13.54 71.12001 12.87 70.800011 12.37 c
70.480011 11.87 69.99334 11.613334 69.340012 11.6 c
68.380013 11.6 67.613342 11.936667 67.040009 12.610001 c
66.466675 13.283334 66.17334 14.22 66.160011 15.42 c
66.160011 20 l
64.960014 20 l
64.960014 13.26 l
64.946686 12.806666 64.913353 11.973333 64.860016 10.76 c
66.060013 10.76 l
66.086678 11.746667 66.11335 12.286667 66.140015 12.38 c
66.200012 12.38 l
66.466682 11.806667 66.893349 11.353334 67.480011 11.020001 c
68.066673 10.686667 68.693344 10.520001 69.360008 10.520001 c
69.360001 10.520001 l
h
86.400002 10.520001 m
87.080002 10.520001 87.66333 10.693334 88.150002 11.040001 c
88.636673 11.386668 88.980003 11.880001 89.18 12.520001 c
89.446671 11.88 89.866669 11.386667 90.440002 11.040001 c
91.013336 10.693335 91.646667 10.520001 92.340004 10.520001 c
94.67334 10.520001 95.840004 11.826667 95.840004 14.440001 c
95.840004 20 l
94.640007 20 l
94.640007 14.5 l
94.640007 12.58 93.866676 11.613334 92.320007 11.6 c
91.386673 11.6 90.686676 11.906667 90.220009 12.520001 c
89.753342 13.133334 89.520012 13.926667 89.520012 14.900001 c
89.520012 20 l
88.320015 20 l
88.320015 14.38 l
88.320015 13.54 88.160011 12.87 87.840012 12.37 c
87.520012 11.87 87.03334 11.613334 86.380013 11.6 c
85.420013 11.6 84.653343 11.936667 84.080009 12.610001 c
83.506676 13.283334 83.213341 14.22 83.200012 15.42 c
83.200012 20 l
82.000015 20 l
82.000015 13.26 l
81.986687 12.806666 81.953354 11.973333 81.900017 10.76 c
83.100014 10.76 l
83.126678 11.746667 83.153351 12.286667 83.180016 12.38 c
83.240013 12.38 l
83.506683 11.806667 83.93335 11.353334 84.520012 11.020001 c
85.106674 10.686667 85.733345 10.520001 86.400009 10.520001 c
86.400002 10.520001 l
h
106.279999 14.6 m
106.279999 13.76 105.966667 13.05 105.339996 12.47 c
104.713326 11.89 103.953331 11.6 103.059998 11.6 c
102.193329 11.6 101.446663 11.89 100.82 12.47 c
100.193336 13.05 99.826668 13.76 99.720001 14.6 c
106.279999 14.6 l
h
103.139999 10.520001 m
104.419998 10.520001 105.459999 10.933333 106.260002 11.76 c
107.060005 12.586667 107.466675 13.653334 107.480003 14.96 c
107.480003 15.68 l
99.720001 15.68 l
99.773338 16.719999 100.116669 17.556667 100.75 18.190001 c
101.383331 18.823334 102.206665 19.146667 103.220001 19.16 c
103.846672 19.16 104.443336 19.01 105.010002 18.709999 c
105.576668 18.409998 106.013336 18.013332 106.32 17.519999 c
107.199997 18.259998 l
106.333328 19.579998 104.999992 20.239998 103.199997 20.239998 c
101.786659 20.226664 100.656662 19.766665 99.809998 18.859999 c
98.963333 17.953333 98.533333 16.786667 98.519997 15.359999 c
98.519997 13.973332 98.956665 12.823332 99.829994 11.909999 c
100.703323 10.996666 101.806656 10.533332 103.139992 10.519999 c
103.139999 10.520001 l
h
114.559998 10.520001 m
115.760002 10.520001 116.643333 10.843334 117.209999 11.490001 c
117.776665 12.136667 118.066666 13.153335 118.080002 14.540001 c
118.080002 20 l
116.880005 20 l
116.880005 14.6 l
116.880005 13.573334 116.690002 12.816667 116.310005 12.33 c
115.930008 11.843333 115.346672 11.599999 114.560005 11.6 c
113.58667 11.6 112.813339 11.936667 112.240005 12.610001 c
111.666672 13.283334 111.373337 14.22 111.360008 15.42 c
111.360008 20 l
110.160011 20 l
110.160011 13.26 l
110.146683 12.873334 110.11335 12.04 110.060013 10.76 c
111.26001 10.76 l
111.286674 11.813334 111.313347 12.353334 111.340012 12.38 c
111.400009 12.38 l
111.666679 11.82 112.090012 11.37 112.670006 11.03 c
113.25 10.69 113.880005 10.52 114.560005 10.52 c
114.559998 10.520001 l
h
130.860001 5.48 m
132.5 5.48 133.786667 6.073333 134.720001 7.26 c
133.580002 8.08 l
132.886673 7.146667 131.966675 6.68 130.820007 6.68 c
129.886673 6.68 129.130005 6.92 128.550003 7.4 c
127.969994 7.879999 127.666664 8.533333 127.639999 9.36 c
127.639999 10.08 127.860001 10.663333 128.300003 11.11 c
128.740005 11.556666 129.506668 11.933333 130.600006 12.24 c
132.040009 12.666667 133.000015 13.043333 133.480011 13.37 c
133.960007 13.696667 134.323349 14.099999 134.570007 14.58 c
134.816666 15.06 134.940002 15.66 134.940002 16.379999 c
134.940002 17.526665 134.529999 18.469999 133.710007 19.209999 c
132.890015 19.949999 131.833344 20.333332 130.540009 20.359999 c
128.500015 20.359999 126.966675 19.646666 125.94001 18.219999 c
127.200012 17.379999 l
127.906677 18.553333 128.986679 19.146666 130.440018 19.16 c
131.386688 19.16 132.153351 18.896666 132.740021 18.369999 c
133.326691 17.843332 133.620026 17.179998 133.620026 16.379999 c
133.620026 15.913333 133.536697 15.53 133.370026 15.23 c
133.203354 14.929999 132.950027 14.67 132.610031 14.45 c
132.270035 14.23 131.8367 14.03 131.310028 13.849999 c
130.783356 13.669999 130.166687 13.459999 129.460022 13.219999 c
128.393356 12.873332 127.603355 12.386665 127.090019 11.759999 c
126.576683 11.133333 126.320015 10.333333 126.320023 9.359999 c
126.320023 8.213332 126.750023 7.279998 127.610023 6.559999 c
128.470032 5.839999 129.55336 5.479999 130.860016 5.479999 c
130.860001 5.48 l
h
138.380005 17.440001 m
138.380005 17.946667 138.583344 18.360001 138.990005 18.68 c
139.396667 19 139.900009 19.16 140.5 19.16 c
141.580002 19.16 142.383331 18.876667 142.910004 18.309999 c
143.436676 17.743332 143.700012 16.973333 143.699997 16 c
143.699997 15.36 l
142.259995 15.36 l
141.033325 15.36 140.080002 15.546666 139.399994 15.92 c
138.719986 16.293333 138.37999 16.799999 138.37999 17.440001 c
138.380005 17.440001 l
h
141.100006 10.520001 m
142.340012 10.520001 143.26001 10.806667 143.860001 11.38 c
144.459991 11.953333 144.766663 12.753333 144.779999 13.780001 c
144.779999 16.52 l
144.779999 18.013334 144.839996 19.173334 144.959991 20 c
143.839996 20 l
143.759995 19.586666 143.720001 19.086666 143.720001 18.5 c
143.680008 18.5 l
143.013336 19.66 141.940002 20.24 140.460007 20.24 c
139.460007 20.24 138.666672 19.993334 138.080002 19.5 c
137.493332 19.006666 137.193329 18.34 137.180008 17.5 c
137.180008 16.473333 137.623337 15.7 138.51001 15.18 c
139.396683 14.660001 140.633347 14.400001 142.220016 14.400001 c
143.700012 14.400001 l
143.700012 13.860001 l
143.700012 13.1 143.466675 12.533334 143.000015 12.160001 c
142.533356 11.786668 141.900024 11.600001 141.100021 11.6 c
140.033356 11.6 139.093353 11.946667 138.280014 12.64 c
137.580017 11.820001 l
138.02002 11.393333 138.563354 11.070001 139.210022 10.85 c
139.856689 10.63 140.486694 10.520001 141.100021 10.520001 c
141.100006 10.520001 l
h
140.660004 5.84 m
142.740005 8.72 l
141.740005 8.72 l
139.060013 5.84 l
140.660019 5.84 l
140.660004 5.84 l
h
152.100006 10.520001 m
152.326675 10.520001 152.559998 10.553334 152.800003 10.620001 c
152.660004 11.800001 l
152.513336 11.746668 152.353333 11.720001 152.180008 11.720001 c
151.206665 11.720001 150.463333 12.020001 149.950012 12.620001 c
149.436691 13.22 149.180023 14.000001 149.180008 14.960001 c
149.180008 20 l
147.980011 20 l
147.980011 13.26 l
147.980011 13.126667 147.946671 12.293334 147.880005 10.76 c
149.080002 10.76 l
149.106659 11.68 149.133331 12.22 149.160004 12.38 c
149.853333 11.14 150.833328 10.520001 152.100006 10.520001 c
h
154.839996 4.88 m
156.039993 4.88 l
156.039993 20 l
154.839996 20 l
154.839996 4.88 l
h
163.639999 14.72 m
163.639999 15.8 l
158.699997 15.8 l
158.699997 14.72 l
163.639999 14.72 l
h
170.48 5.48 m
172.12 5.48 173.40666 6.073333 174.34 7.26 c
173.2 8.08 l
172.50667 7.146667 171.58667 6.68 170.44 6.68 c
169.50667 6.68 168.75 6.92 168.17 7.4 c
167.589996 7.879999 167.286652 8.533333 167.259995 9.36 c
167.259995 10.08 167.479996 10.663333 167.92 11.11 c
168.36 11.556666 169.12666 11.933333 170.22 12.24 c
171.66 12.666667 172.62001 13.043333 173.10001 13.37 c
173.58 13.696667 173.94334 14.099999 174.19 14.58 c
174.43666 15.06 174.56 15.66 174.56 16.379999 c
174.56 17.526665 174.14999 18.469999 173.33 19.209999 c
172.51001 19.949999 171.45334 20.333332 170.16 20.359999 c
168.12001 20.359999 166.58667 19.646666 165.559998 18.219999 c
166.819992 17.379999 l
167.526657 18.553333 168.60666 19.146666 170.06 19.16 c
171.00667 19.16 171.77333 18.896666 172.36 18.369999 c
172.94667 17.843332 173.24001 17.179998 173.24001 16.379999 c
173.24001 15.913333 173.15668 15.53 172.99001 15.23 c
172.82333 14.929999 172.57001 14.67 172.23001 14.45 c
171.89001 14.23 171.45668 14.03 170.93001 13.849999 c
170.40334 13.669999 169.78667 13.459999 169.08 13.219999 c
168.01334 12.873332 167.223328 12.386665 166.710007 11.759999 c
166.196686 11.133333 165.940018 10.333333 165.940002 9.359999 c
165.940002 8.213332 166.369995 7.279998 167.229996 6.559999 c
168.09 5.839999 169.17332 5.479999 170.48 5.479999 c
170.48 5.48 l
h
W
[174.420006 0 0 15.720003 0.140004 4.640002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
